// Generated by Dagger (https://google.github.io/dagger).
package com.vs.shcherbakov.savy.di;

import com.vs.shcherbakov.savy.data.PrefStorage;
import com.vs.shcherbakov.savy.ui.auth.AuthComponent;
import com.vs.shcherbakov.savy.ui.auth.AuthModule;
import com.vs.shcherbakov.savy.ui.auth.AuthModule_ProvideStartInteractor$app_debugFactory;
import com.vs.shcherbakov.savy.ui.auth.interactor.AuthInteractor;
import com.vs.shcherbakov.savy.ui.auth.presenter.AuthtPresenter;
import com.vs.shcherbakov.savy.ui.auth.presenter.AuthtPresenter_MembersInjector;
import com.vs.shcherbakov.savy.ui.image_list.ImageListComponent;
import com.vs.shcherbakov.savy.ui.image_list.ImageListModule;
import com.vs.shcherbakov.savy.ui.image_list.ImageListModule_ProvideImageListInterector$app_debugFactory;
import com.vs.shcherbakov.savy.ui.image_list.interactor.ImageListInterector;
import com.vs.shcherbakov.savy.ui.image_list.interactor.ImageListInterector_MembersInjector;
import com.vs.shcherbakov.savy.ui.image_list.presenter.ImageListPresenter;
import com.vs.shcherbakov.savy.ui.image_list.presenter.ImageListPresenter_MembersInjector;
import com.vs.shcherbakov.savy.ui.resource_list.ResourceListComponent;
import com.vs.shcherbakov.savy.ui.resource_list.ResourceListModule;
import com.vs.shcherbakov.savy.ui.resource_list.ResourceListModule_ProvideResListInterector$app_debugFactory;
import com.vs.shcherbakov.savy.ui.resource_list.interactor.ResListInterector;
import com.vs.shcherbakov.savy.ui.resource_list.interactor.ResListInterector_MembersInjector;
import com.vs.shcherbakov.savy.ui.resource_list.presenter.ResListPresenter;
import com.vs.shcherbakov.savy.ui.resource_list.presenter.ResListPresenter_MembersInjector;
import com.vs.shcherbakov.savy.ui.settings.SettingsComponent;
import com.vs.shcherbakov.savy.ui.settings.SettingsModule;
import com.vs.shcherbakov.savy.ui.settings.SettingsModule_ProvideSettingsInterector$app_debugFactory;
import com.vs.shcherbakov.savy.ui.settings.interactor.SettingsInteractor;
import com.vs.shcherbakov.savy.ui.settings.interactor.SettingsInteractor_MembersInjector;
import com.vs.shcherbakov.savy.ui.settings.presenter.SettingsPresenter;
import com.vs.shcherbakov.savy.ui.settings.presenter.SettingsPresenter_MembersInjector;
import com.vs.shcherbakov.savy.ui.webview.WebModule;
import com.vs.shcherbakov.savy.ui.webview.WebModule_ProvideWebViewInteractor$app_debugFactory;
import com.vs.shcherbakov.savy.ui.webview.interactor.WebInteractor;
import com.vs.shcherbakov.savy.ui.webview.presenter.WebPresenter;
import com.vs.shcherbakov.savy.ui.webview.presenter.WebPresenter_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<PrefStorage> providePrefStorage$app_debugProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.providePrefStorage$app_debugProvider =
        DoubleCheck.provider(
            AppModule_ProvidePrefStorage$app_debugFactory.create(builder.appModule));
  }

  @Override
  public AuthComponent.Builder authBuilder() {
    return new AuthComponentBuilder();
  }

  @Override
  public ImageListComponent.Builder imageListBuilder() {
    return new ImageListComponentBuilder();
  }

  @Override
  public ResourceListComponent.Builder resourceListBuilder() {
    return new ResourceListComponentBuilder();
  }

  @Override
  public SettingsComponent.Builder settingsBuilder() {
    return new SettingsComponentBuilder();
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder moduleContext(AppModule moduleContext) {
      this.appModule = Preconditions.checkNotNull(moduleContext);
      return this;
    }
  }

  private final class AuthComponentBuilder implements AuthComponent.Builder {
    private AuthModule authModule;

    private WebModule webModule;

    @Override
    public AuthComponent build() {
      if (authModule == null) {
        this.authModule = new AuthModule();
      }
      if (webModule == null) {
        this.webModule = new WebModule();
      }
      return new AuthComponentImpl(this);
    }

    @Override
    public AuthComponentBuilder authModule(AuthModule module) {
      this.authModule = Preconditions.checkNotNull(module);
      return this;
    }

    @Override
    public AuthComponentBuilder webModule(WebModule module2) {
      this.webModule = Preconditions.checkNotNull(module2);
      return this;
    }
  }

  private final class AuthComponentImpl implements AuthComponent {
    private AuthModule authModule;

    private WebModule webModule;

    private AuthComponentImpl(AuthComponentBuilder builder) {
      initialize(builder);
    }

    private AuthInteractor getAuthInteractor() {
      return AuthModule_ProvideStartInteractor$app_debugFactory
          .proxyProvideStartInteractor$app_debug(
              authModule, DaggerAppComponent.this.providePrefStorage$app_debugProvider.get());
    }

    private WebInteractor getWebInteractor() {
      return WebModule_ProvideWebViewInteractor$app_debugFactory
          .proxyProvideWebViewInteractor$app_debug(
              webModule, DaggerAppComponent.this.providePrefStorage$app_debugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AuthComponentBuilder builder) {
      this.authModule = builder.authModule;
      this.webModule = builder.webModule;
    }

    @Override
    public void inject(AuthtPresenter item) {
      injectAuthtPresenter(item);
    }

    @Override
    public void inject(WebPresenter item) {
      injectWebPresenter(item);
    }

    private AuthtPresenter injectAuthtPresenter(AuthtPresenter instance) {
      AuthtPresenter_MembersInjector.injectInteractor(instance, getAuthInteractor());
      return instance;
    }

    private WebPresenter injectWebPresenter(WebPresenter instance) {
      WebPresenter_MembersInjector.injectInteractor(instance, getWebInteractor());
      return instance;
    }
  }

  private final class ImageListComponentBuilder implements ImageListComponent.Builder {
    private ImageListModule imageListModule;

    @Override
    public ImageListComponent build() {
      if (imageListModule == null) {
        this.imageListModule = new ImageListModule();
      }
      return new ImageListComponentImpl(this);
    }

    @Override
    public ImageListComponentBuilder imageListModule(ImageListModule module) {
      this.imageListModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ImageListComponentImpl implements ImageListComponent {
    private ImageListModule imageListModule;

    private ImageListComponentImpl(ImageListComponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ImageListComponentBuilder builder) {
      this.imageListModule = builder.imageListModule;
    }

    @Override
    public void inject(ImageListPresenter item) {
      injectImageListPresenter(item);
    }

    @Override
    public void inject(ImageListInterector item) {
      injectImageListInterector(item);
    }

    private ImageListPresenter injectImageListPresenter(ImageListPresenter instance) {
      ImageListPresenter_MembersInjector.injectImageListInteractor(
          instance,
          ImageListModule_ProvideImageListInterector$app_debugFactory
              .proxyProvideImageListInterector$app_debug(imageListModule));
      return instance;
    }

    private ImageListInterector injectImageListInterector(ImageListInterector instance) {
      ImageListInterector_MembersInjector.injectPrefsStorage(
          instance, DaggerAppComponent.this.providePrefStorage$app_debugProvider.get());
      return instance;
    }
  }

  private final class ResourceListComponentBuilder implements ResourceListComponent.Builder {
    private ResourceListModule resourceListModule;

    @Override
    public ResourceListComponent build() {
      if (resourceListModule == null) {
        this.resourceListModule = new ResourceListModule();
      }
      return new ResourceListComponentImpl(this);
    }

    @Override
    public ResourceListComponentBuilder resourceListModule(ResourceListModule module) {
      this.resourceListModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class ResourceListComponentImpl implements ResourceListComponent {
    private ResourceListModule resourceListModule;

    private ResourceListComponentImpl(ResourceListComponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ResourceListComponentBuilder builder) {
      this.resourceListModule = builder.resourceListModule;
    }

    @Override
    public void inject(ResListPresenter item) {
      injectResListPresenter(item);
    }

    @Override
    public void inject(ResListInterector item) {
      injectResListInterector(item);
    }

    private ResListPresenter injectResListPresenter(ResListPresenter instance) {
      ResListPresenter_MembersInjector.injectResListInteractor(
          instance,
          ResourceListModule_ProvideResListInterector$app_debugFactory
              .proxyProvideResListInterector$app_debug(resourceListModule));
      return instance;
    }

    private ResListInterector injectResListInterector(ResListInterector instance) {
      ResListInterector_MembersInjector.injectPrefsStorage(
          instance, DaggerAppComponent.this.providePrefStorage$app_debugProvider.get());
      return instance;
    }
  }

  private final class SettingsComponentBuilder implements SettingsComponent.Builder {
    private SettingsModule settingsModule;

    @Override
    public SettingsComponent build() {
      if (settingsModule == null) {
        this.settingsModule = new SettingsModule();
      }
      return new SettingsComponentImpl(this);
    }

    @Override
    public SettingsComponentBuilder settingstModule(SettingsModule module) {
      this.settingsModule = Preconditions.checkNotNull(module);
      return this;
    }
  }

  private final class SettingsComponentImpl implements SettingsComponent {
    private SettingsModule settingsModule;

    private SettingsComponentImpl(SettingsComponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SettingsComponentBuilder builder) {
      this.settingsModule = builder.settingsModule;
    }

    @Override
    public void inject(SettingsPresenter item) {
      injectSettingsPresenter(item);
    }

    @Override
    public void inject(SettingsInteractor item) {
      injectSettingsInteractor(item);
    }

    private SettingsPresenter injectSettingsPresenter(SettingsPresenter instance) {
      SettingsPresenter_MembersInjector.injectSettingsInteractor(
          instance,
          SettingsModule_ProvideSettingsInterector$app_debugFactory
              .proxyProvideSettingsInterector$app_debug(settingsModule));
      return instance;
    }

    private SettingsInteractor injectSettingsInteractor(SettingsInteractor instance) {
      SettingsInteractor_MembersInjector.injectPrefsStorage(
          instance, DaggerAppComponent.this.providePrefStorage$app_debugProvider.get());
      return instance;
    }
  }
}
